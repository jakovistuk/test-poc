apiVersion: template.openshift.io/v1
kind: Template
labels:
  application: todo-app-flask-mongo
  createdBy: todo-app-flask-mongo-template
message: |-
  The following service(s) have been created in your project: ${APPLICATION_NAME}.

  ${APPLICATION_NAME} Application
metadata:
  annotations:
    description: |-
      An example Flask application with a MongoDB database. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md.

      WARNING: MongoDB instance is ephemeral so any data will be lost on pod destruction.
    iconClass: icon-python,icon-mongodb
    openshift.io/display-name: Flask + MongoDB (Ephemeral)
    tags: quickstart,python,flask,database,mongodb,gogs
    template.openshift.io/documentation-url: https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md
    template.openshift.io/long-description: This template defines resources needed
      to develop a Flask based application, including a build configuration, application
      deployment configuration, and database deployment configuration.  The database
      is stored in non-persistent storage, so this configuration should be used for
      experimental purposes only.
    template.openshift.io/provider-display-name: OpenShift In Action
  creationTimestamp: 2020-01-30T15:13:47Z
  name: dev-todo-app-flask-mongo-gogs
  namespace: dev
  resourceVersion: "38976183"
  selfLink: /apis/template.openshift.io/v1/namespaces/dev/templates/dev-todo-app-flask-mongo-gogs
  uid: 1ce25006-4373-11ea-b3dc-005056aa2127
objects:
- apiVersion: authorization.openshift.io/v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_edit
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: default
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      component: ${MONGODB_APPLICATION_NAME}
    name: ${MONGODB_APPLICATION_NAME}
  spec:
    ports:
    - name: mongo
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      name: ${MONGODB_APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      component: ${MONGODB_APPLICATION_NAME}
    name: ${MONGODB_APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      name: ${MONGODB_APPLICATION_NAME}
    strategy:
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          name: ${MONGODB_APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MONGODB_USER
            value: ${MONGODB_USER}
          - name: MONGODB_PASSWORD
            value: ${MONGODB_PASSWORD}
          - name: MONGODB_DATABASE
            value: ${MONGODB_DATABASE}
          - name: MONGODB_ADMIN_PASSWORD
            value: ${MONGODB_ADMIN_PASSWORD}
          image: ${MONGODB_APPLICATION_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: ${MONGODB_APPLICATION_NAME}
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MONGO_MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: mongodb-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${MONGODB_APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: mongodb:3.2
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: ${APPLICATION_NAME}
  spec:
    tags:
    - name: latest
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      build: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      sourceSecret:
        name: git-scm
      type: Git
    strategy:
      dockerStrategy:
        dockerfilePath: Dockerfile
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_TRIGGER_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_TRIGGER_SECRET}
      type: Generic
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      component: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      component: ${APPLICATION_NAME}
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          component: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: DB_HOST
            value: ${MONGODB_APPLICATION_NAME}
          - name: MONGO_CONNECTION_URI
            value: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${MONGODB_APPLICATION_NAME}/${MONGODB_DATABASE}
          image: ${APPLICATION_NAME}
          imagePullPolicy: IfNotPresent
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"${MONGODB_APPLICATION_NAME}","namespace":"","kind":"Service"}]'
    labels:
      component: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 5000
    selector:
      component: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      component: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    host: ${APPLICATION_HOSTNAME}
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
parameters:
- description: The name for the todo-app-flask-mongo application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: todo-app-flask-mongo
- description: The name for the mongodb application.
  displayName: Mongodb App
  name: MONGODB_APPLICATION_NAME
  required: true
  value: mongodb
- description: 'Custom hostname for the todo application.  Leave blank for default
    hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
  displayName: Application route
  name: APPLICATION_HOSTNAME
- description: Git source URI for application
  displayName: Git source repository
  name: GIT_URI
  required: true
  value: https://tfs2/tfs/ISPC%20Dev/One/_git/TestCh6
- description: Set this to the relative path to your project if it is not in the root
    of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
  value: node-example
- description: Git branch/tag reference
  displayName: Git branch/tag reference
  name: GIT_REF
  required: true
  value: master
- description: Database name
  displayName: Database name
  name: MONGODB_DATABASE
  required: true
  value: tododb
- description: Database user name
  displayName: Database user name
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: MONGODB_USER
  required: true
- description: Database user password
  displayName: Database user password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MONGODB_PASSWORD
  required: true
- description: Database admin password
  displayName: Database admin password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MONGODB_ADMIN_PASSWORD
  required: true
- description: Maximum amount of memory the Flask container can use.
  displayName: Memory Limit (Flask)
  name: MEMORY_LIMIT
  required: true
  value: 128Mi
- description: Maximum amount of memory the MongoDB container can use.
  displayName: Memory Limit (MongoDB)
  name: MONGO_MEMORY_LIMIT
  required: true
  value: 128Mi
- description: Password for the Gogs user.
  displayName: Gogs Password
  name: GOGS_PASSWORD
  required: true
  value: password
- displayName: Gogs version
  name: GOGS_VERSION
  required: true
  value: 0.11.29
- description: Password for Gogs Git Server PostgreSQL backend
  displayName: Gogs' PostgreSQL Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: GOGS_POSTGRESQL_PASSWORD
  required: true
- description: Github trigger secret
  displayName: GitHub Trigger
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GITHUB_TRIGGER_SECRET
  required: true
- description: Generic build trigger secret
  displayName: Generic Trigger
  from: '[a-zA-Z0-9]{4}'
  generate: expression
  name: GENERIC_TRIGGER_SECRET
  required: true
